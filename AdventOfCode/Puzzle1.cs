using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AdventOfCode
{
    internal class Puzzle1
    {
        int[] _inputs = new int[] { 118, 121, 123, 125, 134, 132, 137, 135, 136, 137, 138, 139, 163, 170, 171, 159, 161, 162, 156, 155, 151, 168, 172, 166, 159, 180, 187, 172, 161, 162, 161, 183, 182, 185, 175, 173, 174, 177, 192, 191, 190, 219, 225, 226, 216, 226, 230, 234, 236, 244, 235, 245, 266, 299, 300, 281, 291, 309, 303, 333, 332, 309, 312, 313, 314, 315, 339, 351, 353, 352, 338, 343, 337, 346, 338, 335, 332, 329, 345, 347, 332, 339, 354, 373, 376, 397, 400, 401, 433, 434, 440, 434, 438, 443, 448, 452, 456, 450, 459, 463, 464, 488, 492, 488, 506, 507, 516, 523, 524, 522, 546, 551, 553, 554, 553, 562, 559, 567, 569, 556, 557, 577, 581, 582, 591, 593, 594, 595, 598, 602, 611, 623, 604, 613, 603, 607, 612, 616, 612, 613, 612, 598, 607, 622, 619, 636, 638, 639, 637, 659, 657, 677, 678, 679, 655, 651, 655, 654, 662, 666, 672, 673, 676, 683, 684, 693, 688, 691, 698, 702, 704, 706, 707, 710, 709, 725, 731, 729, 767, 779, 780, 807, 806, 808, 815, 812, 811, 819, 820, 821, 822, 826, 812, 810, 820, 817, 803, 808, 826, 831, 837, 842, 839, 840, 827, 838, 840, 841, 842, 848, 841, 838, 839, 838, 839, 841, 821, 812, 813, 796, 817, 820, 845, 854, 857, 858, 866, 869, 870, 881, 882, 888, 889, 891, 886, 891, 901, 930, 940, 944, 943, 958, 952, 916, 903, 905, 907, 910, 915, 907, 906, 907, 919, 921, 923, 925, 924, 929, 931, 936, 937, 935, 953, 962, 968, 980, 981, 1003, 1005, 1006, 1011, 1013, 1014, 1015, 1016, 1015, 995, 1002, 1018, 1020, 1031, 1043, 1038, 1039, 1040, 1041, 1043, 1037, 1041, 1050, 1052, 1048, 1049, 1050, 1053, 1057, 1064, 1067, 1068, 1078, 1086, 1098, 1103, 1119, 1138, 1114, 1115, 1129, 1130, 1143, 1138, 1141, 1150, 1153, 1146, 1155, 1157, 1145, 1146, 1147, 1145, 1144, 1158, 1163, 1167, 1171, 1174, 1176, 1188, 1207, 1205, 1208, 1212, 1216, 1222, 1231, 1233, 1249, 1253, 1269, 1231, 1235, 1242, 1241, 1246, 1247, 1263, 1266, 1259, 1260, 1279, 1280, 1281, 1285, 1284, 1285, 1296, 1300, 1302, 1319, 1312, 1313, 1325, 1342, 1344, 1361, 1349, 1363, 1367, 1366, 1346, 1347, 1369, 1385, 1386, 1397, 1401, 1402, 1396, 1397, 1400, 1395, 1400, 1411, 1419, 1427, 1446, 1445, 1459, 1460, 1464, 1472, 1482, 1474, 1475, 1476, 1481, 1484, 1487, 1494, 1497, 1494, 1495, 1498, 1501, 1511, 1521, 1528, 1533, 1535, 1544, 1518, 1521, 1509, 1533, 1537, 1540, 1545, 1546, 1544, 1564, 1553, 1576, 1577, 1563, 1560, 1564, 1569, 1570, 1571, 1573, 1576, 1573, 1596, 1597, 1593, 1597, 1596, 1592, 1597, 1578, 1555, 1576, 1584, 1585, 1584, 1594, 1598, 1608, 1613, 1614, 1606, 1608, 1621, 1648, 1614, 1615, 1606, 1609, 1610, 1625, 1638, 1640, 1617, 1655, 1661, 1644, 1648, 1649, 1653, 1675, 1674, 1681, 1679, 1682, 1683, 1695, 1696, 1699, 1700, 1701, 1704, 1709, 1729, 1732, 1739, 1742, 1746, 1748, 1746, 1753, 1744, 1752, 1749, 1750, 1758, 1762, 1767, 1771, 1772, 1761, 1763, 1784, 1804, 1809, 1792, 1787, 1806, 1809, 1815, 1817, 1828, 1821, 1824, 1823, 1824, 1841, 1840, 1833, 1840, 1842, 1863, 1862, 1865, 1866, 1868, 1878, 1887, 1897, 1905, 1906, 1913, 1908, 1915, 1930, 1928, 1922, 1925, 1927, 1928, 1939, 1938, 1946, 1947, 1954, 1955, 1959, 1961, 1951, 1945, 1949, 1954, 1959, 1961, 1962, 1964, 1960, 1956, 1958, 1975, 1990, 1994, 2002, 2004, 2011, 2010, 2020, 2042, 2043, 2046, 2047, 2044, 2048, 2065, 2074, 2075, 2086, 2088, 2094, 2098, 2092, 2083, 2082, 2084, 2094, 2097, 2099, 2098, 2101, 2104, 2112, 2118, 2105, 2108, 2109, 2104, 2105, 2103, 2114, 2144, 2138, 2139, 2142, 2114, 2120, 2139, 2147, 2153, 2190, 2191, 2197, 2193, 2206, 2216, 2225, 2230, 2232, 2258, 2264, 2236, 2264, 2289, 2306, 2307, 2315, 2319, 2322, 2277, 2279, 2271, 2279, 2285, 2290, 2297, 2316, 2317, 2320, 2329, 2330, 2323, 2326, 2327, 2331, 2336, 2341, 2348, 2352, 2386, 2396, 2401, 2400, 2401, 2418, 2419, 2429, 2432, 2430, 2428, 2406, 2401, 2434, 2435, 2443, 2463, 2478, 2479, 2481, 2482, 2486, 2490, 2491, 2492, 2496, 2497, 2499, 2507, 2525, 2522, 2523, 2522, 2521, 2526, 2531, 2530, 2525, 2526, 2537, 2533, 2534, 2542, 2544, 2531, 2539, 2546, 2550, 2551, 2553, 2554, 2552, 2562, 2566, 2551, 2583, 2587, 2601, 2605, 2604, 2610, 2628, 2639, 2641, 2654, 2657, 2676, 2672, 2686, 2694, 2677, 2693, 2694, 2707, 2696, 2710, 2753, 2752, 2722, 2723, 2724, 2741, 2746, 2753, 2763, 2764, 2805, 2806, 2810, 2811, 2823, 2854, 2855, 2852, 2872, 2873, 2867, 2876, 2881, 2885, 2899, 2900, 2901, 2903, 2918, 2912, 2924, 2915, 2920, 2932, 2942, 2943, 2934, 2953, 2960, 2956, 2957, 2959, 2982, 2991, 3016, 3018, 3047, 3032, 3048, 3051, 3056, 3063, 3064, 3063, 3065, 3066, 3070, 3075, 3069, 3075, 3073, 3074, 3083, 3086, 3097, 3093, 3082, 3077, 3098, 3105, 3128, 3144, 3148, 3174, 3173, 3172, 3171, 3169, 3176, 3180, 3166, 3165, 3182, 3183, 3206, 3207, 3208, 3211, 3215, 3214, 3220, 3233, 3234, 3248, 3249, 3252, 3253, 3254, 3256, 3258, 3266, 3265, 3266, 3274, 3291, 3275, 3291, 3294, 3299, 3292, 3293, 3306, 3292, 3291, 3290, 3291, 3295, 3296, 3288, 3294, 3305, 3308, 3315, 3319, 3327, 3332, 3334, 3332, 3342, 3346, 3347, 3348, 3360, 3370, 3371, 3373, 3379, 3387, 3386, 3389, 3393, 3398, 3405, 3406, 3413, 3417, 3431, 3433, 3434, 3438, 3442, 3443, 3445, 3446, 3447, 3448, 3454, 3439, 3450, 3451, 3453, 3452, 3455, 3462, 3466, 3475, 3479, 3476, 3479, 3480, 3484, 3486, 3489, 3491, 3505, 3506, 3510, 3513, 3530, 3532, 3537, 3540, 3542, 3553, 3558, 3570, 3569, 3570, 3569, 3570, 3565, 3559, 3561, 3556, 3557, 3575, 3585, 3590, 3592, 3593, 3602, 3619, 3623, 3624, 3669, 3671, 3672, 3683, 3686, 3699, 3708, 3709, 3714, 3713, 3718, 3719, 3742, 3729, 3730, 3731, 3729, 3727, 3741, 3742, 3741, 3742, 3734, 3740, 3744, 3734, 3737, 3738, 3739, 3759, 3760, 3761, 3750, 3751, 3753, 3745, 3744, 3731, 3733, 3725, 3750, 3757, 3767, 3768, 3774, 3777, 3791, 3815, 3816, 3817, 3819, 3820, 3825, 3835, 3836, 3858, 3861, 3860, 3844, 3846, 3847, 3877, 3906, 3910, 3912, 3940, 3941, 3975, 3980, 3983, 3987, 4016, 4028, 4047, 4066, 4061, 4058, 4061, 4066, 4088, 4089, 4092, 4098, 4105, 4110, 4111, 4103, 4108, 4082, 4087, 4086, 4087, 4082, 4083, 4084, 4104, 4110, 4111, 4119, 4128, 4133, 4113, 4129, 4128, 4129, 4121, 4123, 4126, 4132, 4133, 4143, 4149, 4148, 4147, 4145, 4142, 4143, 4146, 4138, 4139, 4141, 4147, 4148, 4160, 4156, 4162, 4173, 4179, 4181, 4190, 4191, 4190, 4191, 4192, 4193, 4194, 4208, 4211, 4215, 4226, 4223, 4227, 4230, 4250, 4248, 4267, 4260, 4274, 4275, 4278, 4291, 4298, 4304, 4314, 4315, 4317, 4319, 4325, 4326, 4327, 4349, 4345, 4356, 4360, 4365, 4366, 4370, 4385, 4384, 4386, 4399, 4423, 4397, 4410, 4409, 4388, 4393, 4397, 4402, 4403, 4418, 4413, 4418, 4417, 4418, 4422, 4411, 4374, 4403, 4412, 4427, 4445, 4449, 4453, 4458, 4459, 4465, 4447, 4448, 4450, 4460, 4464, 4465, 4467, 4472, 4486, 4484, 4482, 4507, 4512, 4525, 4524, 4525, 4527, 4522, 4521, 4524, 4550, 4551, 4552, 4550, 4554, 4555, 4586, 4578, 4582, 4594, 4588, 4592, 4595, 4598, 4599, 4614, 4615, 4623, 4632, 4633, 4655, 4661, 4662, 4690, 4689, 4690, 4694, 4704, 4705, 4694, 4697, 4702, 4703, 4704, 4703, 4709, 4714, 4722, 4728, 4741, 4761, 4767, 4768, 4770, 4775, 4778, 4770, 4788, 4789, 4802, 4805, 4808, 4811, 4819, 4812, 4813, 4821, 4838, 4839, 4843, 4817, 4821, 4824, 4820, 4843, 4845, 4849, 4852, 4872, 4873, 4870, 4885, 4902, 4920, 4921, 4923, 4936, 4930, 4932, 4933, 4931, 4949, 4974, 4976, 4977, 4978, 4990, 4991, 5001, 5002, 5001, 5027, 5026, 5021, 5054, 5055, 5056, 5059, 5064, 5065, 5074, 5081, 5093, 5095, 5100, 5113, 5125, 5126, 5137, 5142, 5123, 5118, 5117, 5118, 5125, 5135, 5142, 5154, 5165, 5158, 5146, 5148, 5149, 5163, 5176, 5177, 5169, 5171, 5168, 5186, 5191, 5196, 5197, 5224, 5226, 5224, 5215, 5213, 5214, 5198, 5201, 5202, 5213, 5214, 5216, 5251, 5255, 5259, 5262, 5259, 5261, 5264, 5273, 5281, 5254, 5265, 5280, 5289, 5294, 5298, 5309, 5310, 5298, 5297, 5306, 5311, 5301, 5306, 5289, 5287, 5300, 5299, 5301, 5308, 5314, 5323, 5329, 5330, 5324, 5325, 5332, 5335, 5332, 5333, 5334, 5337, 5345, 5351, 5355, 5364, 5366, 5382, 5391, 5408, 5400, 5402, 5405, 5390, 5391, 5394, 5407, 5409, 5410, 5411, 5412, 5416, 5412, 5424, 5426, 5425, 5426, 5434, 5421, 5433, 5440, 5441, 5435, 5424, 5417, 5413, 5414, 5415, 5418, 5420, 5421, 5444, 5442, 5433, 5435, 5436, 5437, 5407, 5406, 5424, 5427, 5433, 5434, 5438, 5441, 5443, 5444, 5445, 5446, 5453, 5464, 5465, 5478, 5474, 5462, 5463, 5491, 5498, 5499, 5500, 5501, 5504, 5506, 5530, 5524, 5517, 5521, 5530, 5532, 5538, 5544, 5541, 5554, 5556, 5553, 5554, 5556, 5562, 5563, 5568, 5572, 5584, 5581, 5584, 5582, 5586, 5588, 5599, 5602, 5603, 5601, 5610, 5607, 5602, 5604, 5600, 5602, 5605, 5606, 5608, 5606, 5610, 5619, 5620, 5619, 5623, 5624, 5626, 5627, 5628, 5630, 5637, 5650, 5674, 5677, 5661, 5669, 5675, 5676, 5681, 5685, 5687, 5709, 5713, 5714, 5724, 5728, 5729, 5727, 5741, 5755, 5741, 5730, 5724, 5727, 5726, 5730, 5731, 5732, 5734, 5733, 5734, 5735, 5736, 5737, 5736, 5730, 5732, 5742, 5744, 5747, 5755, 5760, 5755, 5757, 5768, 5793, 5798, 5799, 5805, 5808, 5810, 5812, 5814, 5815, 5817, 5850, 5851, 5839, 5860, 5870, 5871, 5879, 5886, 5897, 5904, 5908, 5907, 5911, 5910, 5914, 5916, 5917, 5919, 5917, 5928, 5930, 5931, 5932, 5941, 5944, 5946, 5951, 5931, 5905, 5930, 5936, 5937, 5935, 5936, 5942, 5944, 5951, 5916, 5899, 5892, 5891, 5902, 5907, 5951, 5952, 5957, 5958, 5961, 5965, 5969, 5974, 5975, 5953, 5956, 5965, 5985, 5987, 6017, 6016, 6017, 5990, 5991, 5999, 5993, 5995, 6016, 6017, 6014, 6049, 6042, 6053, 6055, 6068, 6069, 6074, 6072, 6079, 6074, 6076, 6066, 6065, 6067, 6098, 6104, 6116, 6115, 6113, 6099, 6100, 6101, 6100, 6111, 6115, 6140, 6106, 6107, 6117, 6131, 6135, 6144, 6118, 6113, 6118, 6128, 6129, 6135, 6138, 6143, 6144, 6142, 6144, 6145, 6144, 6147, 6151, 6149, 6150, 6151, 6135, 6136, 6132, 6118, 6113, 6120, 6117, 6118, 6122, 6125, 6126, 6124, 6131, 6132, 6135, 6136, 6154, 6160, 6167, 6179, 6181, 6186, 6196, 6225, 6228, 6232, 6221, 6238, 6249, 6252, 6254, 6256, 6260, 6269, 6271, 6263, 6272, 6271, 6272, 6271, 6285, 6308, 6319, 6327, 6334, 6337, 6356, 6385, 6380, 6387, 6395, 6396, 6392, 6395, 6398, 6400, 6401, 6396, 6399, 6400, 6380, 6379, 6380, 6377, 6397, 6398, 6396, 6415, 6419, 6438, 6449, 6465, 6459, 6461, 6463, 6466, 6492, 6493, 6502, 6501, 6503, 6510, 6511, 6512, 6505, 6506, 6508, 6525, 6523, 6530, 6536, 6535, 6539, 6544, 6545, 6534, 6532, 6537, 6542, 6543, 6544, 6545, 6559, 6560, 6577, 6578, 6580, 6581, 6582, 6591, 6597, 6581, 6595, 6608, 6620, 6624, 6632, 6636, 6639, 6637, 6645, 6648, 6650, 6651, 6645, 6648, 6661, 6658, 6659, 6668, 6667, 6666, 6684, 6700, 6701, 6730, 6736, 6746, 6749, 6750, 6751, 6741, 6728, 6729, 6762, 6763, 6792, 6795, 6796, 6813, 6827, 6835, 6843, 6844, 6852, 6854, 6856, 6868, 6870, 6876, 6874, 6865, 6870, 6867, 6870, 6877, 6887, 6881, 6869, 6871, 6874, 6875, 6876, 6902, 6903, 6901, 6902, 6912, 6913, 6912, 6913, 6927, 6928, 6935, 6936, 6942, 6943, 6942, 6943, 6953, 6954, 6961, 6989, 6992, 6993, 6997, 7018, 7022, 7041, 7052, 7055, 7058, 7049, 7050, 7051, 7047, 7064, 7059, 7074, 7082, 7083, 7097, 7102, 7092, 7094, 7101, 7143, 7165, 7176, 7178, 7183, 7180, 7203, 7204, 7207, 7211, 7217, 7220, 7212, 7215, 7217, 7223, 7207, 7214, 7213, 7215, 7214, 7212, 7219, 7226, 7225, 7230, 7239, 7240, 7241, 7248, 7247, 7254, 7258, 7262, 7280, 7298, 7297, 7307, 7308, 7316, 7314, 7339, 7340, 7359, 7356, 7383, 7382, 7385, 7397, 7399, 7410, 7437, 7440, 7439, 7457, 7455, 7462, 7463, 7464, 7465, 7477, 7478, 7494, 7500, 7507, 7512, 7547, 7558, 7559, 7571, 7572, 7575, 7608, 7633, 7636, 7629, 7628, 7633, 7635, 7641, 7659, 7663, 7677, 7694, 7708, 7701, 7697, 7682, 7684, 7675, 7664, 7672, 7675, 7669, 7671, 7672, 7684, 7688, 7701, 7712, 7741, 7727, 7733, 7735, 7736, 7737, 7744, 7748, 7749, 7750, 7736, 7737, 7752, 7755, 7756, 7757, 7791, 7790, 7785, 7791, 7812, 7825, 7816, 7819, 7824, 7829, 7855, 7846, 7854, 7827, 7831, 7835, 7836, 7845, 7848, 7861, 7862, 7864, 7847, 7858, 7877, 7878, 7888, 7885, 7881, 7878, 7883, 7884, 7882, 7883, 7901, 7916, 7922, 7909, 7915, 7929, 7942, 7953, 7954, 7951, 7967, 7963 };

        public void Run1()
        {
            int increases = 0;
            for (int i=1; i < _inputs.Length;i++)
            {
                if (_inputs[i] > _inputs[i-1])
                    increases++;
            }
            Console.WriteLine($"Puzzle1: {increases} larger measurements");
        }

        public void Run2()
        {
            int increases = 0;
            int rest = _inputs.Length % 3;
            int size = _inputs.Length - rest;
            List<int> sums = new List<int>();
            for (int i = 0; i < size; i++)
            {
                int sum = _inputs[i] + _inputs[i + 1] + _inputs[i + 2];
                if (sums.Any() && sums.Last() < sum)
                {
                    increases++;
                }
                sums.Add(sum);
            }
            Console.WriteLine($"Windows: {sums.Count}, Increases: {increases}");
        }
    }

    class Puzzle2
    {
        string[] inputs = new string[] { "forward 7", "forward 9", "forward 3", "down 5", "down 9", "forward 6", "down 2", "forward 2", "forward 8", "forward 3", "forward 5", "forward 5", "forward 8", "down 6", "forward 8", "forward 2", "up 8", "down 8", "forward 6", "down 4", "down 5", "forward 2", "down 6", "forward 7", "down 9", "forward 9", "down 2", "down 7", "up 6", "up 3", "up 7", "down 9", "forward 1", "forward 1", "down 4", "down 9", "forward 4", "up 4", "forward 8", "forward 9", "down 7", "down 4", "up 6", "down 8", "down 2", "forward 8", "forward 6", "down 3", "forward 2", "forward 6", "down 3", "forward 1", "forward 8", "down 8", "down 9", "forward 5", "forward 4", "forward 8", "down 7", "forward 4", "forward 3", "forward 6", "down 3", "forward 6", "forward 6", "down 9", "down 9", "down 9", "down 2", "down 7", "down 4", "forward 3", "up 7", "up 3", "down 1", "forward 4", "up 9", "forward 4", "forward 2", "down 2", "forward 9", "up 4", "forward 5", "down 8", "up 7", "down 5", "down 1", "up 7", "up 4", "forward 5", "up 8", "up 3", "down 2", "down 1", "down 2", "forward 3", "up 1", "forward 1", "forward 1", "down 1", "down 6", "down 6", "up 4", "down 4", "down 4", "forward 6", "down 6", "forward 7", "forward 5", "up 7", "down 9", "down 6", "forward 5", "forward 6", "forward 2", "down 4", "forward 5", "forward 8", "down 8", "down 6", "forward 2", "forward 8", "down 3", "forward 6", "down 1", "forward 5", "down 8", "up 1", "forward 6", "down 7", "forward 4", "down 8", "down 8", "forward 8", "down 6", "down 3", "forward 2", "forward 8", "forward 9", "forward 4", "forward 3", "down 4", "forward 3", "down 9", "down 1", "forward 2", "forward 3", "forward 7", "down 1", "forward 6", "forward 8", "forward 6", "forward 2", "down 8", "up 9", "forward 6", "forward 8", "down 7", "down 5", "up 4", "forward 9", "up 7", "up 3", "forward 3", "down 6", "forward 4", "forward 2", "down 3", "forward 9", "forward 5", "up 7", "down 9", "up 4", "down 3", "forward 8", "up 1", "forward 2", "forward 8", "forward 8", "forward 5", "down 7", "up 6", "down 9", "down 4", "forward 2", "down 5", "down 2", "down 2", "forward 6", "down 2", "forward 9", "forward 1", "up 1", "forward 4", "down 1", "forward 3", "down 3", "forward 4", "up 5", "up 3", "forward 6", "forward 8", "forward 2", "forward 6", "up 5", "down 9", "down 8", "forward 3", "down 5", "forward 8", "forward 1", "down 9", "up 3", "down 2", "down 9", "up 8", "down 2", "up 7", "up 2", "up 3", "down 9", "down 1", "down 7", "down 1", "forward 1", "down 9", "down 6", "forward 3", "up 7", "up 8", "down 5", "down 6", "up 2", "forward 8", "down 4", "up 1", "forward 4", "up 4", "forward 2", "down 4", "forward 4", "down 9", "up 4", "forward 8", "up 7", "forward 1", "down 3", "up 7", "forward 5", "down 5", "forward 2", "forward 7", "forward 3", "down 8", "forward 4", "forward 9", "up 2", "down 4", "down 5", "forward 4", "down 4", "up 6", "down 8", "up 1", "down 1", "up 6", "up 6", "down 7", "down 7", "forward 2", "forward 4", "forward 8", "down 8", "down 4", "down 4", "down 7", "forward 4", "down 3", "forward 5", "forward 5", "forward 7", "down 7", "forward 1", "down 8", "up 4", "up 9", "up 3", "up 6", "forward 5", "forward 5", "forward 4", "forward 9", "down 9", "forward 4", "forward 1", "up 8", "up 2", "down 9", "up 4", "forward 2", "up 8", "forward 6", "forward 2", "up 9", "down 3", "forward 3", "up 7", "down 7", "forward 4", "forward 7", "forward 3", "down 4", "down 5", "forward 7", "up 3", "up 1", "down 4", "forward 6", "down 1", "forward 1", "down 4", "down 3", "forward 9", "forward 4", "down 9", "down 3", "forward 2", "forward 5", "forward 6", "down 3", "forward 5", "down 9", "forward 2", "forward 9", "down 7", "down 4", "down 3", "down 1", "up 2", "forward 6", "forward 4", "down 9", "down 2", "forward 2", "forward 9", "down 3", "forward 8", "down 8", "forward 5", "down 4", "forward 4", "up 6", "up 3", "down 3", "down 9", "forward 5", "forward 8", "down 2", "forward 9", "forward 5", "up 9", "forward 2", "forward 3", "forward 4", "up 8", "up 1", "up 6", "down 5", "down 8", "down 4", "forward 6", "up 2", "forward 1", "forward 7", "up 8", "forward 5", "up 9", "forward 7", "down 6", "up 5", "up 7", "up 1", "down 3", "up 6", "forward 1", "up 1", "forward 2", "forward 4", "forward 5", "up 3", "up 8", "up 1", "up 6", "up 3", "down 5", "down 4", "up 8", "down 9", "up 7", "down 6", "down 9", "forward 5", "forward 3", "down 9", "down 3", "down 6", "up 3", "up 8", "down 4", "down 1", "up 9", "up 9", "forward 8", "down 7", "forward 1", "forward 4", "down 8", "forward 2", "down 4", "forward 7", "forward 3", "forward 5", "forward 1", "up 2", "down 9", "down 5", "up 6", "down 3", "forward 1", "up 9", "forward 6", "forward 1", "forward 4", "up 7", "forward 6", "down 1", "forward 9", "forward 1", "forward 3", "down 9", "down 8", "down 5", "forward 4", "down 7", "up 1", "forward 8", "up 4", "forward 6", "down 2", "forward 4", "forward 7", "down 8", "forward 6", "down 7", "forward 7", "up 7", "forward 4", "down 8", "down 8", "forward 8", "forward 6", "down 9", "down 8", "down 6", "down 2", "down 4", "forward 7", "forward 3", "down 8", "down 5", "forward 2", "down 9", "down 7", "up 1", "up 5", "forward 6", "up 8", "up 7", "up 4", "down 6", "down 6", "down 8", "down 9", "down 2", "forward 6", "forward 6", "forward 2", "up 9", "forward 6", "forward 9", "forward 8", "down 5", "down 3", "forward 1", "forward 8", "forward 1", "forward 3", "down 4", "forward 5", "forward 1", "forward 6", "down 8", "down 9", "forward 3", "forward 2", "forward 1", "forward 3", "up 7", "down 7", "down 2", "forward 3", "down 5", "down 2", "down 7", "down 9", "down 5", "down 7", "down 9", "up 7", "forward 7", "forward 9", "forward 8", "forward 5", "down 1", "up 6", "up 6", "forward 5", "up 6", "down 8", "up 6", "forward 2", "down 9", "down 5", "up 8", "up 7", "down 8", "down 7", "up 3", "down 5", "forward 6", "forward 2", "down 6", "forward 6", "forward 1", "forward 5", "forward 3", "down 4", "forward 3", "down 1", "up 7", "forward 3", "forward 9", "forward 3", "forward 4", "down 9", "forward 6", "down 1", "up 6", "forward 2", "forward 1", "down 2", "down 1", "down 9", "forward 1", "up 8", "down 1", "up 3", "forward 3", "forward 1", "up 6", "down 1", "down 7", "down 2", "forward 5", "down 4", "forward 4", "forward 9", "down 7", "forward 6", "down 4", "forward 8", "down 5", "forward 6", "down 6", "down 6", "down 9", "forward 3", "forward 2", "forward 7", "forward 6", "forward 8", "up 6", "forward 7", "down 2", "up 4", "forward 6", "forward 3", "forward 9", "down 1", "forward 9", "down 1", "forward 6", "down 9", "forward 7", "forward 9", "forward 6", "up 3", "down 3", "forward 3", "up 1", "down 8", "forward 7", "down 4", "forward 7", "forward 7", "down 1", "forward 5", "down 6", "forward 6", "down 8", "down 2", "down 7", "forward 9", "forward 7", "forward 2", "down 5", "forward 7", "forward 8", "forward 5", "forward 5", "up 1", "down 1", "up 4", "forward 5", "forward 8", "down 4", "up 8", "forward 8", "up 2", "down 1", "down 9", "up 9", "down 9", "forward 3", "forward 1", "down 7", "down 2", "forward 5", "up 7", "forward 9", "forward 1", "down 4", "down 8", "down 2", "up 1", "up 6", "forward 9", "down 3", "down 2", "forward 5", "forward 4", "down 5", "down 4", "up 4", "forward 4", "down 3", "up 3", "down 7", "down 7", "forward 1", "forward 4", "forward 7", "forward 5", "down 4", "down 7", "forward 1", "forward 9", "down 4", "forward 8", "up 4", "down 9", "down 9", "up 6", "up 3", "forward 2", "forward 3", "up 7", "forward 7", "down 4", "forward 5", "forward 5", "up 2", "down 5", "down 9", "forward 9", "forward 7", "forward 1", "up 5", "up 5", "forward 8", "forward 3", "forward 2", "down 4", "down 6", "down 2", "forward 5", "down 3", "down 9", "forward 8", "forward 7", "forward 7", "down 1", "up 3", "down 8", "down 9", "forward 6", "up 6", "down 6", "forward 2", "forward 3", "forward 7", "up 8", "down 8", "down 7", "forward 2", "down 2", "up 7", "up 9", "forward 1", "forward 1", "forward 1", "forward 1", "forward 1", "up 8", "down 3", "up 8", "down 5", "down 3", "up 4", "forward 4", "down 3", "down 4", "down 3", "up 3", "down 3", "up 2", "up 6", "down 9", "down 6", "up 8", "up 7", "down 1", "down 7", "down 3", "forward 3", "forward 5", "down 4", "down 7", "forward 1", "forward 8", "up 9", "up 2", "forward 3", "up 1", "forward 7", "down 7", "down 5", "forward 9", "up 9", "forward 3", "down 2", "up 4", "down 2", "down 1", "down 9", "down 9", "forward 3", "forward 4", "down 2", "down 6", "up 8", "down 5", "forward 7", "forward 4", "up 3", "forward 2", "down 4", "down 8", "forward 4", "forward 6", "forward 8", "down 6", "down 8", "up 2", "forward 5", "up 7", "down 9", "down 6", "forward 7", "up 3", "down 9", "forward 2", "down 6", "up 6", "down 6", "down 3", "down 2", "down 8", "down 4", "forward 8", "up 7", "forward 9", "forward 4", "down 3", "forward 3", "down 9", "down 2", "forward 2", "forward 1", "down 4", "down 3", "down 8", "up 6", "down 4", "forward 3", "down 7", "forward 8", "down 7", "forward 6", "forward 2", "forward 7", "forward 6", "forward 4", "up 4", "forward 2", "down 4", "down 2", "forward 3", "down 2", "up 9", "down 6", "forward 5", "up 6", "forward 1", "up 1", "down 3", "up 4", "forward 1", "down 6", "forward 9", "up 2", "forward 4", "up 9", "up 5", "down 5", "forward 3", "down 9", "forward 5", "down 3", "forward 7", "forward 5", "forward 9", "up 5", "down 4", "down 2", "forward 9", "down 3", "down 8", "down 9", "forward 2", "down 8", "up 6", "down 4", "down 2", "up 9", "forward 8", "forward 8", "down 8", "forward 4", "down 7", "forward 2", "up 7", "forward 7", "down 4", "forward 4", "down 3", "forward 9", "down 9", "forward 6", "down 5", "down 9", "up 5", "forward 7", "forward 2", "down 3", "down 7", "down 2", "forward 3", "down 4", "up 3", "down 1", "forward 9", "down 4", "down 8", "up 9", "forward 7", "down 8", "forward 9", "down 2", "up 2", "down 1", "down 1", "forward 6", "forward 2", "forward 3", "down 5", "down 1", "down 1", "up 4", "forward 8", "down 3", "down 1", "forward 9", "forward 7", "forward 2", "up 8", "up 6", "down 7", "down 6", "forward 3", "down 2", "down 9", "up 7", "forward 5", "up 9", "down 9", "down 4", "down 8", "down 5", "down 8", "down 8", "forward 6", "forward 1", "forward 4", "forward 7", "down 7", "down 6", "forward 4", "forward 7", "forward 6", "down 7", "forward 4", "forward 9", "up 3", "forward 9", "forward 5", "forward 1", "up 2", "down 1", "down 5", "forward 9", "up 4", "forward 6", "up 3", "up 6", "forward 8", "down 6", "forward 5", "down 3", "forward 2", "forward 7", "down 4", "up 8", "forward 6", "up 7", "up 9", "forward 3", "down 3", "down 7", "down 7", "down 1", "down 6", "down 9", "up 1", "forward 6", "forward 6", "down 3", "forward 7", "down 8", "forward 1", "down 7", "down 4", "down 3", "down 4", "down 4", "forward 7", "down 3", "forward 6", "up 9", "forward 3" };
      
        public void Run1()
        {
            int hor = 0, ver = 0;
            foreach (var input in inputs)
            {
                string[] s = input.Split(' ');
                int value = int.Parse(s[1]);
                if (s[0] == "forward")
                    hor += value;
                else if (s[0] == "down")
                    ver += value;
                else if (s[0] == "up")
                    ver -= value;
            }
            Console.WriteLine($"Total: (hor={hor})x(ver={ver}) = {hor * ver}");
        }

        public void Run2()
        {
            long hor=0, ver=0, aim=0;
            int i = 0;
            foreach (var input in inputs)
            {
                string[] s = input.Split(' ');
                int value = int.Parse(s[1]);
                if (s[0] == "forward")
                {
                    hor += value;
                    ver = ver + ( aim * value);
                }
                else if (s[0] == "down")
                {
                    //ver += value;
                    aim += value;
                }
                else if (s[0] == "up")
                {
                    //ver -= value;
                    aim -= value;
                }
                Console.WriteLine($"[{++i}] {input}\t\t: (hor={hor}) (ver={ver})  (aim={aim})");
            }
            Console.WriteLine($"Total: (hor={hor})x(ver={ver}, aim={aim}) = {hor * ver}");
        }

    }

    class Puzzle3
    {
        // uint[] inputs = new uint[] { 0b100101001000, 0b011101110101, 0b000001010101, 0b001001010001, 0b001101011110, 0b010101001100, 0b110110011111, 0b100100110101, 0b101010110110, 0b001100001001, 0b010100000001, 0b011001010010, 0b001011000011, 0b001001100111, 0b000000100011, 0b100101101111, 0b000100011011, 0b110011000101, 0b111101100100, 0b001110000111, 0b010110001010, 0b110100011111, 0b110011010000, 0b010100100111, 0b100011111101, 0b111101000110, 0b011000111111, 0b001111001101, 0b100100010000, 0b111111110111, 0b101111110110, 0b110000011000, 0b010101011011, 0b001000100000, 0b100011101100, 0b001111001111, 0b101000101010, 0b110110000000, 0b001101101001, 0b000000001010, 0b010101010111, 0b010101110010, 0b010000110101, 0b001110001101, 0b011110011010, 0b011011100100, 0b000111110110, 0b100110101100, 0b100001101111, 0b100000010111, 0b111100001111, 0b110000101110, 0b011000111011, 0b001101000011, 0b111110010001, 0b101000111000, 0b110111100110, 0b101101011010, 0b101111110010, 0b110101111110, 0b001011011001, 0b001101010000, 0b111001100110, 0b100111001000, 0b011110100101, 0b011111000110, 0b010010010101, 0b001001001001, 0b011111011101, 0b100010000101, 0b101111111010, 0b000110100001, 0b011001000110, 0b101001010000, 0b101001000001, 0b100110111101, 0b110011001011, 0b010010100001, 0b110001100010, 0b111010000001, 0b100011011110, 0b101010011000, 0b001000100100, 0b100011001110, 0b111110100010, 0b101110001000, 0b001100110001, 0b010010101011, 0b001011101111, 0b101111011101, 0b011100110000, 0b101010011011, 0b000011011010, 0b101010111100, 0b011101010001, 0b111111101000, 0b110110010000, 0b100101000111, 0b111010010011, 0b010100111001, 0b010110100101, 0b100000010101, 0b111110011000, 0b011111011100, 0b010001101110, 0b110011110000, 0b100101001100, 0b100000000101, 0b000011111101, 0b001011100111, 0b001111100110, 0b000100111100, 0b101110100101, 0b010000111000, 0b011001011111, 0b011100100100, 0b000011000100, 0b111110111010, 0b011111110000, 0b110011000100, 0b010010001111, 0b001100111101, 0b111101001001, 0b100000110010, 0b101110110011, 0b100111010010, 0b010001001001, 0b010000001011, 0b100001000001, 0b010010010100, 0b000000111101, 0b001100010010, 0b000111001110, 0b000101010010, 0b000010011000, 0b001111011011, 0b110001100000, 0b011110101010, 0b011000100110, 0b110111011101, 0b001001100010, 0b110101000011, 0b000011110100, 0b100000011110, 0b111100101001, 0b111111101001, 0b111110000101, 0b110101100011, 0b100101110100, 0b001001011000, 0b011000110100, 0b110000001000, 0b100100111011, 0b110111001111, 0b000110000111, 0b011011110110, 0b011100001011, 0b111111111000, 0b111001101000, 0b011101010111, 0b110011001100, 0b001000000111, 0b101011001001, 0b000100101111, 0b111110100111, 0b100000011010, 0b101100100100, 0b110001000110, 0b101100011110, 0b110010011001, 0b101000100110, 0b001111110111, 0b010011111100, 0b000111101101, 0b011010011110, 0b101010010011, 0b101000110011, 0b011111001000, 0b000001111000, 0b111001110110, 0b111110011101, 0b101110101000, 0b010010010110, 0b011011110100, 0b110100100011, 0b000101000111, 0b000110000000, 0b001101010100, 0b100101101000, 0b101101001011, 0b110101011010, 0b010111100111, 0b101100010111, 0b111110001000, 0b010101101000, 0b100010001001, 0b110100010000, 0b100110000000, 0b101101001100, 0b100010111001, 0b001101010001, 0b000101000101, 0b001110111000, 0b011111011000, 0b011001101100, 0b111101101110, 0b101000101011, 0b000100111001, 0b011101000111, 0b100001111100, 0b111000101101, 0b011000001111, 0b100101000010, 0b010101100011, 0b011111110001, 0b010110100110, 0b001101001100, 0b100010101010, 0b000110100111, 0b000101100000, 0b110001010101, 0b110000110001, 0b101000010001, 0b010110011101, 0b001011111000, 0b010001000010, 0b010010001101, 0b010100100101, 0b011100001111, 0b111101101111, 0b111100101100, 0b010011100110, 0b100001101110, 0b111110110110, 0b011100100101, 0b010000010000, 0b001011100000, 0b011110010001, 0b001000110001, 0b111011100111, 0b111101011011, 0b100111010001, 0b101100010110, 0b100010101101, 0b101111011111, 0b000100111000, 0b000111100011, 0b111100001101, 0b111101010100, 0b111011111101, 0b001101001011, 0b100100100111, 0b111011011101, 0b111110011001, 0b100110110001, 0b011110111011, 0b110010000011, 0b001110000010, 0b010100111111, 0b001000001011, 0b000101001000, 0b111110000001, 0b101110110000, 0b111110101001, 0b110110111110, 0b011010110011, 0b010011000100, 0b110110111101, 0b111101001000, 0b011000010100, 0b101010010010, 0b111000001111, 0b100110111111, 0b100011100110, 0b101001000111, 0b101000000011, 0b101100011011, 0b001111010101, 0b110100010001, 0b111001001010, 0b101110110010, 0b000011001110, 0b101000000110, 0b010010011001, 0b000111101100, 0b000010010111, 0b001100101010, 0b001010110000, 0b010100011000, 0b010000010101, 0b111100010111, 0b011010010110, 0b111111110001, 0b001111000100, 0b010001100111, 0b010011111010, 0b101101101101, 0b110100100001, 0b011101001110, 0b000010001111, 0b011000110101, 0b010011100100, 0b011111000101, 0b111011110010, 0b101100101011, 0b001001000010, 0b101011111110, 0b110111011010, 0b100111100100, 0b010101011110, 0b100111010011, 0b100100011101, 0b001101000111, 0b101001010100, 0b001000101100, 0b100101101101, 0b101111011100, 0b011011111001, 0b001100111011, 0b100100000110, 0b111111001110, 0b011111000011, 0b100000101010, 0b001110111101, 0b010110111100, 0b010000010001, 0b101010100000, 0b011001100001, 0b100000010100, 0b100111001110, 0b010011110100, 0b001010010000, 0b000110011100, 0b111001110100, 0b010110001110, 0b101110101011, 0b010010111101, 0b111111100001, 0b110100101000, 0b111010100100, 0b001001101010, 0b011011011111, 0b011001111001, 0b110110001100, 0b101000001100, 0b000101010001, 0b100010010111, 0b101110000111, 0b111010101001, 0b100100111010, 0b111100101010, 0b101111010100, 0b111000011001, 0b001100101001, 0b101000000000, 0b110110011110, 0b111011110001, 0b110000110000, 0b011001100011, 0b101100111101, 0b101010101110, 0b011011101011, 0b101001011101, 0b110000110100, 0b010010101100, 0b001110111010, 0b011111001010, 0b001100100110, 0b001111101001, 0b000001111110, 0b110000111001, 0b000111001111, 0b100001111010, 0b111011101111, 0b101001110001, 0b101010101001, 0b011001011000, 0b001001010011, 0b100100111000, 0b011101011010, 0b110001101010, 0b100000100011, 0b001000101001, 0b001110011100, 0b001001111100, 0b001001110110, 0b001010100011, 0b011010101100, 0b011101110100, 0b110100111000, 0b101100000111, 0b010001100010, 0b100011000111, 0b010010000010, 0b011110110100, 0b110000000110, 0b010100100110, 0b101000001111, 0b011110001101, 0b100111011100, 0b100000100111, 0b101110000001, 0b000111110100, 0b001011001101, 0b011110101001, 0b110011011111, 0b100011011011, 0b100100111001, 0b110010100001, 0b000000010110, 0b011011100011, 0b001000111100, 0b100000100110, 0b001000100110, 0b111011000101, 0b011010000110, 0b001000000010, 0b010100101001, 0b011110101110, 0b111111100111, 0b000010001110, 0b101100010101, 0b011101110001, 0b001011110101, 0b000100001010, 0b000101011010, 0b011111110110, 0b101100001000, 0b010101010000, 0b001101111111, 0b010011110101, 0b001101111101, 0b100100100011, 0b111111011101, 0b101101100110, 0b011100001110, 0b011101010110, 0b001110001100, 0b000111100100, 0b111110011111, 0b100010001011, 0b011001100100, 0b110000101000, 0b000001010110, 0b111110110101, 0b111101101101, 0b001001101111, 0b101010111010, 0b011010110100, 0b010100110000, 0b010100100011, 0b010011011010, 0b111111001101, 0b101000100010, 0b000001010100, 0b100011010001, 0b001100000100, 0b111101011010, 0b000100000111, 0b100011100000, 0b000100110101, 0b100111001011, 0b011111100001, 0b110011011010, 0b111011000100, 0b000101111000, 0b000010001010, 0b000110111001, 0b100011011101, 0b101011010000, 0b011100111011, 0b000011100110, 0b001111100101, 0b001001111110, 0b001000110011, 0b110111011100, 0b101000100111, 0b100010100000, 0b111000000100, 0b101010011100, 0b101110111110, 0b000000110110, 0b110111011111, 0b101011110000, 0b111000100110, 0b000011111111, 0b010101100001, 0b001110011001, 0b011011011110, 0b110111111110, 0b000111001010, 0b100000110100, 0b001001111000, 0b011010111010, 0b111100000000, 0b000110010111, 0b100001010100, 0b000010001100, 0b001001011111, 0b100000011011, 0b111011110011, 0b101101110001, 0b100101011010, 0b111110101010, 0b000000111001, 0b010100101110, 0b011110000001, 0b001001010110, 0b110110111010, 0b011101000010, 0b011111010100, 0b000101101100, 0b010101111101, 0b110011111100, 0b000010010101, 0b000010100000, 0b101100100000, 0b010010010000, 0b111001110011, 0b101100111001, 0b000010110000, 0b000100010111, 0b011101111110, 0b110000011011, 0b011100011011, 0b110000010101, 0b010010110101, 0b111101110100, 0b010010000101, 0b110010000010, 0b110101010000, 0b010101000101, 0b110101010001, 0b101010100111, 0b010100110111, 0b110011010110, 0b010001011011, 0b011111001101, 0b001100100011, 0b110000010111, 0b110000010110, 0b110111011000, 0b111000000110, 0b000101000010, 0b000101110011, 0b111010100011, 0b000111011111, 0b001110000110, 0b110010011111, 0b100001111000, 0b110110011010, 0b100000111110, 0b110000100001, 0b111101000001, 0b001101001110, 0b000000111000, 0b000010100100, 0b101001011110, 0b010110101010, 0b001010010111, 0b011011100101, 0b001100010100, 0b010011100010, 0b001000010011, 0b010111101000, 0b011000011000, 0b000101100100, 0b010101100101, 0b010111110001, 0b001000100010, 0b001010110100, 0b111011000001, 0b011110001111, 0b010111100001, 0b111010010100, 0b000000100101, 0b111110000111, 0b010010101010, 0b010011000001, 0b111011010000, 0b100101011001, 0b011000000011, 0b100101100101, 0b100101011011, 0b001000100011, 0b101111001000, 0b100110001001, 0b001011001011, 0b000000000001, 0b111011110100, 0b100101001001, 0b111100100110, 0b011010010011, 0b011000000001, 0b100111001100, 0b101001100000, 0b100000011101, 0b000110100000, 0b010110011100, 0b010000010100, 0b101111110011, 0b001101101100, 0b111010111000, 0b000000101110, 0b101001111101, 0b101000110111, 0b101111101001, 0b010101110001, 0b100011010010, 0b111110001100, 0b111111000000, 0b000101111001, 0b100111101101, 0b001111110000, 0b001010101101, 0b111001101110, 0b000011000010, 0b011000010000, 0b101101010000, 0b010001101100, 0b000011010111, 0b000010101010, 0b101001101001, 0b110011001110, 0b000101110100, 0b100001110000, 0b001100011110, 0b101100110001, 0b011010011000, 0b000010111010, 0b001001100100, 0b010111001110, 0b111101010001, 0b111000001001, 0b101100101110, 0b001011101011, 0b001100010001, 0b100110101110, 0b011000001001, 0b111001111101, 0b101110100100, 0b010111011011, 0b010110111010, 0b000011101100, 0b010001011100, 0b011100101011, 0b100001000100, 0b000111000101, 0b001110100010, 0b111100000101, 0b011101101000, 0b110011110110, 0b110110100110, 0b110010001111, 0b101111111011, 0b101111011110, 0b010011100101, 0b010101101010, 0b000001100010, 0b101101001101, 0b111001010010, 0b100110110011, 0b111000111010, 0b100000110000, 0b011100101100, 0b011000110111, 0b101101100011, 0b001000010000, 0b000101101010, 0b010100101111, 0b011010111111, 0b010111011100, 0b100010001100, 0b111011001011, 0b011000000111, 0b011101100101, 0b011001100101, 0b101111010010, 0b100011011001, 0b100111110010, 0b000010010100, 0b000010000001, 0b111011010001, 0b101111001010, 0b001110000100, 0b111100100001, 0b011100000110, 0b000000110111, 0b101100001100, 0b100111110001, 0b010011010111, 0b111111010101, 0b101110101001, 0b010011111101, 0b101011101110, 0b000011000110, 0b111001001111, 0b111101101000, 0b001111101100, 0b011000011111, 0b101100000010, 0b011100110110, 0b001110110001, 0b011111100000, 0b010001010010, 0b111001111110, 0b010100010110, 0b101010100101, 0b111001101010, 0b110110101011, 0b110010011010, 0b110111101011, 0b111101110000, 0b001010100101, 0b001101001000, 0b110101101001, 0b101100010011, 0b011001011001, 0b000110010000, 0b000011000001, 0b000011000101, 0b100100100001, 0b001101101101, 0b000100001111, 0b111100110111, 0b010000111110, 0b111110011010, 0b001101110111, 0b100101111000, 0b000110110100, 0b111110010100, 0b010011001100, 0b101100010100, 0b110011101110, 0b011001101110, 0b110001001011, 0b010000000101, 0b100110101101, 0b000011011111, 0b001101110011, 0b111001001101, 0b011000010110, 0b001010101110, 0b001010010110, 0b101000000101, 0b111101111111, 0b110001001000, 0b001100010110, 0b110001000101, 0b111010001011, 0b011001001011, 0b001011011011, 0b111100001001, 0b101101110101, 0b111010111011, 0b100000111101, 0b100111000000, 0b001110111110, 0b100110010000, 0b101110000000, 0b011101101010, 0b001010011011, 0b001100101100, 0b101011101001, 0b110001000011, 0b011100010111, 0b100001010111, 0b101001110111, 0b000100000001, 0b000100101101, 0b101110101100, 0b000111011001, 0b101011111010, 0b100101010101, 0b010100010111, 0b010000100101, 0b110011000010, 0b001110001111, 0b000010110001, 0b010000100010, 0b111111001000, 0b111000110111, 0b001100010101, 0b000110111100, 0b001100101111, 0b110011111101, 0b001100011010, 0b110000100011, 0b101001101111, 0b111101100101, 0b110100010101, 0b100110001010, 0b001000000000, 0b110111100000, 0b110001001001, 0b001000011101, 0b100000101101, 0b010111001010, 0b000001101000, 0b111000001110, 0b011001010100, 0b000110000001, 0b110110010100, 0b101001001111, 0b101010100010, 0b111010110000, 0b010000001110, 0b111011001101, 0b111111101101, 0b001001100011, 0b110001101111, 0b110111111101, 0b000100010001, 0b101000010100, 0b011011001110, 0b101101101010, 0b011010000100, 0b110000110111, 0b110100010100, 0b100010010001, 0b100111110111, 0b011001111101, 0b010001111100, 0b000110111111, 0b001011100100, 0b110011101100, 0b001101100011, 0b101001100001, 0b110011111111, 0b111000011110, 0b000110101110, 0b101100001101, 0b010010010111, 0b000000101111, 0b010010110110, 0b111111010100, 0b010101101001, 0b110011100110, 0b000101001001, 0b111001111010, 0b111101111110, 0b011011101001, 0b101010010111, 0b101111001111, 0b100101111011, 0b001101110100, 0b011111110101, 0b000101010111, 0b000101000011, 0b010001101010, 0b010101110110, 0b010010100011, 0b011100100010, 0b001101000101, 0b101010001111, 0b000111111010, 0b111010110011, 0b110010100000, 0b011111111111, 0b111001010001, 0b111010000100, 0b000010100001, 0b001100011011, 0b010010000000, 0b100111101000, 0b011010101010, 0b101011101011, 0b010001100101, 0b001011100010, 0b111111110100, 0b001011011010, 0b100111101111, 0b000001110111, 0b110101010101, 0b100111011110, 0b101011100011, 0b001110010011, 0b100101000000, 0b000100001110, 0b001000111000, 0b100011111100, 0b011000010101, 0b100000000111, 0b100011001010, 0b010100110010, 0b011100010101, 0b110001100101, 0b000011100100, 0b111100111001, 0b001100111100, 0b001011101001, 0b101011001101, 0b001001001111, 0b100010110000, 0b010000001111, 0b001101101000, 0b111100101111, 0b111100100100, 0b000001000101, 0b100010000010, 0b110101010110, 0b111111100010, 0b000010110111, 0b000111110011, 0b000010101000, 0b111000001100, 0b101110001011, 0b100000010001, 0b010010110111, 0b011101110111, 0b100001000110, 0b011111101101, 0b111101110010, 0b110100001000, 0b100010111000, 0b000001011010, 0b110010100011, 0b001001011100, 0b111011100010, 0b110110001111, 0b011111110011, 0b011011010100, 0b100000110101, 0b100110000001, 0b100111101100, 0b010101001110, 0b101101111011, 0b001000110100, 0b010110111000, 0b110000100110, 0b100001000101, 0b101000001101, 0b110001011110, 0b110000010100, 0b111111011110, 0b000000010000, 0b001110100100, 0b100100000000, 0b111000011010, 0b000010111100, 0b000101100001, 0b100000011100, 0b111101100011, 0b000011000000, 0b001100001100, 0b100001101011, 0b010100010010, 0b111010101111, 0b101100001011, 0b010110111111, 0b010110110010, 0b000111111111, 0b010100001001, 0b101110011101, 0b011000101101, 0b000100001011, 0b000000101011, 0b100011000101, 0b011010101000, 0b010110000000, 0b001011111010, 0b010011011011, 0b011111100100, 0b000110011101, 0b010001000100, 0b111010110010, 0b111101110101, 0b101001110010, 0b010101001111, 0b001000010010, 0b001101001001, 0b011011000010, 0b010110100111, 0b001000111101, 0b101011001011, 0b110110110101, 0b011110011111, 0b111000111101, 0b100011001011, 0b001111111011, 0b011111010010, 0b000101100011, 0b000010111001, 0b011011010010, 0b010100011010, 0b111111001111, 0b010001110100, 0b110001111011, 0b100011000100, 0b101101000100, 0b001110100111, 0b000101101011, 0b000100001001, 0b110101110110, 0b100000101011, 0b010000000000, 0b011010100000, 0b110011001111, 0b010110110111, 0b100000001001 };
        string[] inputs = new string[] { "100101001000", "011101110101", "000001010101", "001001010001", "001101011110", "010101001100", "110110011111", "100100110101", "101010110110", "001100001001", "010100000001", "011001010010", "001011000011", "001001100111", "000000100011", "100101101111", "000100011011", "110011000101", "111101100100", "001110000111", "010110001010", "110100011111", "110011010000", "010100100111", "100011111101", "111101000110", "011000111111", "001111001101", "100100010000", "111111110111", "101111110110", "110000011000", "010101011011", "001000100000", "100011101100", "001111001111", "101000101010", "110110000000", "001101101001", "000000001010", "010101010111", "010101110010", "010000110101", "001110001101", "011110011010", "011011100100", "000111110110", "100110101100", "100001101111", "100000010111", "111100001111", "110000101110", "011000111011", "001101000011", "111110010001", "101000111000", "110111100110", "101101011010", "101111110010", "110101111110", "001011011001", "001101010000", "111001100110", "100111001000", "011110100101", "011111000110", "010010010101", "001001001001", "011111011101", "100010000101", "101111111010", "000110100001", "011001000110", "101001010000", "101001000001", "100110111101", "110011001011", "010010100001", "110001100010", "111010000001", "100011011110", "101010011000", "001000100100", "100011001110", "111110100010", "101110001000", "001100110001", "010010101011", "001011101111", "101111011101", "011100110000", "101010011011", "000011011010", "101010111100", "011101010001", "111111101000", "110110010000", "100101000111", "111010010011", "010100111001", "010110100101", "100000010101", "111110011000", "011111011100", "010001101110", "110011110000", "100101001100", "100000000101", "000011111101", "001011100111", "001111100110", "000100111100", "101110100101", "010000111000", "011001011111", "011100100100", "000011000100", "111110111010", "011111110000", "110011000100", "010010001111", "001100111101", "111101001001", "100000110010", "101110110011", "100111010010", "010001001001", "010000001011", "100001000001", "010010010100", "000000111101", "001100010010", "000111001110", "000101010010", "000010011000", "001111011011", "110001100000", "011110101010", "011000100110", "110111011101", "001001100010", "110101000011", "000011110100", "100000011110", "111100101001", "111111101001", "111110000101", "110101100011", "100101110100", "001001011000", "011000110100", "110000001000", "100100111011", "110111001111", "000110000111", "011011110110", "011100001011", "111111111000", "111001101000", "011101010111", "110011001100", "001000000111", "101011001001", "000100101111", "111110100111", "100000011010", "101100100100", "110001000110", "101100011110", "110010011001", "101000100110", "001111110111", "010011111100", "000111101101", "011010011110", "101010010011", "101000110011", "011111001000", "000001111000", "111001110110", "111110011101", "101110101000", "010010010110", "011011110100", "110100100011", "000101000111", "000110000000", "001101010100", "100101101000", "101101001011", "110101011010", "010111100111", "101100010111", "111110001000", "010101101000", "100010001001", "110100010000", "100110000000", "101101001100", "100010111001", "001101010001", "000101000101", "001110111000", "011111011000", "011001101100", "111101101110", "101000101011", "000100111001", "011101000111", "100001111100", "111000101101", "011000001111", "100101000010", "010101100011", "011111110001", "010110100110", "001101001100", "100010101010", "000110100111", "000101100000", "110001010101", "110000110001", "101000010001", "010110011101", "001011111000", "010001000010", "010010001101", "010100100101", "011100001111", "111101101111", "111100101100", "010011100110", "100001101110", "111110110110", "011100100101", "010000010000", "001011100000", "011110010001", "001000110001", "111011100111", "111101011011", "100111010001", "101100010110", "100010101101", "101111011111", "000100111000", "000111100011", "111100001101", "111101010100", "111011111101", "001101001011", "100100100111", "111011011101", "111110011001", "100110110001", "011110111011", "110010000011", "001110000010", "010100111111", "001000001011", "000101001000", "111110000001", "101110110000", "111110101001", "110110111110", "011010110011", "010011000100", "110110111101", "111101001000", "011000010100", "101010010010", "111000001111", "100110111111", "100011100110", "101001000111", "101000000011", "101100011011", "001111010101", "110100010001", "111001001010", "101110110010", "000011001110", "101000000110", "010010011001", "000111101100", "000010010111", "001100101010", "001010110000", "010100011000", "010000010101", "111100010111", "011010010110", "111111110001", "001111000100", "010001100111", "010011111010", "101101101101", "110100100001", "011101001110", "000010001111", "011000110101", "010011100100", "011111000101", "111011110010", "101100101011", "001001000010", "101011111110", "110111011010", "100111100100", "010101011110", "100111010011", "100100011101", "001101000111", "101001010100", "001000101100", "100101101101", "101111011100", "011011111001", "001100111011", "100100000110", "111111001110", "011111000011", "100000101010", "001110111101", "010110111100", "010000010001", "101010100000", "011001100001", "100000010100", "100111001110", "010011110100", "001010010000", "000110011100", "111001110100", "010110001110", "101110101011", "010010111101", "111111100001", "110100101000", "111010100100", "001001101010", "011011011111", "011001111001", "110110001100", "101000001100", "000101010001", "100010010111", "101110000111", "111010101001", "100100111010", "111100101010", "101111010100", "111000011001", "001100101001", "101000000000", "110110011110", "111011110001", "110000110000", "011001100011", "101100111101", "101010101110", "011011101011", "101001011101", "110000110100", "010010101100", "001110111010", "011111001010", "001100100110", "001111101001", "000001111110", "110000111001", "000111001111", "100001111010", "111011101111", "101001110001", "101010101001", "011001011000", "001001010011", "100100111000", "011101011010", "110001101010", "100000100011", "001000101001", "001110011100", "001001111100", "001001110110", "001010100011", "011010101100", "011101110100", "110100111000", "101100000111", "010001100010", "100011000111", "010010000010", "011110110100", "110000000110", "010100100110", "101000001111", "011110001101", "100111011100", "100000100111", "101110000001", "000111110100", "001011001101", "011110101001", "110011011111", "100011011011", "100100111001", "110010100001", "000000010110", "011011100011", "001000111100", "100000100110", "001000100110", "111011000101", "011010000110", "001000000010", "010100101001", "011110101110", "111111100111", "000010001110", "101100010101", "011101110001", "001011110101", "000100001010", "000101011010", "011111110110", "101100001000", "010101010000", "001101111111", "010011110101", "001101111101", "100100100011", "111111011101", "101101100110", "011100001110", "011101010110", "001110001100", "000111100100", "111110011111", "100010001011", "011001100100", "110000101000", "000001010110", "111110110101", "111101101101", "001001101111", "101010111010", "011010110100", "010100110000", "010100100011", "010011011010", "111111001101", "101000100010", "000001010100", "100011010001", "001100000100", "111101011010", "000100000111", "100011100000", "000100110101", "100111001011", "011111100001", "110011011010", "111011000100", "000101111000", "000010001010", "000110111001", "100011011101", "101011010000", "011100111011", "000011100110", "001111100101", "001001111110", "001000110011", "110111011100", "101000100111", "100010100000", "111000000100", "101010011100", "101110111110", "000000110110", "110111011111", "101011110000", "111000100110", "000011111111", "010101100001", "001110011001", "011011011110", "110111111110", "000111001010", "100000110100", "001001111000", "011010111010", "111100000000", "000110010111", "100001010100", "000010001100", "001001011111", "100000011011", "111011110011", "101101110001", "100101011010", "111110101010", "000000111001", "010100101110", "011110000001", "001001010110", "110110111010", "011101000010", "011111010100", "000101101100", "010101111101", "110011111100", "000010010101", "000010100000", "101100100000", "010010010000", "111001110011", "101100111001", "000010110000", "000100010111", "011101111110", "110000011011", "011100011011", "110000010101", "010010110101", "111101110100", "010010000101", "110010000010", "110101010000", "010101000101", "110101010001", "101010100111", "010100110111", "110011010110", "010001011011", "011111001101", "001100100011", "110000010111", "110000010110", "110111011000", "111000000110", "000101000010", "000101110011", "111010100011", "000111011111", "001110000110", "110010011111", "100001111000", "110110011010", "100000111110", "110000100001", "111101000001", "001101001110", "000000111000", "000010100100", "101001011110", "010110101010", "001010010111", "011011100101", "001100010100", "010011100010", "001000010011", "010111101000", "011000011000", "000101100100", "010101100101", "010111110001", "001000100010", "001010110100", "111011000001", "011110001111", "010111100001", "111010010100", "000000100101", "111110000111", "010010101010", "010011000001", "111011010000", "100101011001", "011000000011", "100101100101", "100101011011", "001000100011", "101111001000", "100110001001", "001011001011", "000000000001", "111011110100", "100101001001", "111100100110", "011010010011", "011000000001", "100111001100", "101001100000", "100000011101", "000110100000", "010110011100", "010000010100", "101111110011", "001101101100", "111010111000", "000000101110", "101001111101", "101000110111", "101111101001", "010101110001", "100011010010", "111110001100", "111111000000", "000101111001", "100111101101", "001111110000", "001010101101", "111001101110", "000011000010", "011000010000", "101101010000", "010001101100", "000011010111", "000010101010", "101001101001", "110011001110", "000101110100", "100001110000", "001100011110", "101100110001", "011010011000", "000010111010", "001001100100", "010111001110", "111101010001", "111000001001", "101100101110", "001011101011", "001100010001", "100110101110", "011000001001", "111001111101", "101110100100", "010111011011", "010110111010", "000011101100", "010001011100", "011100101011", "100001000100", "000111000101", "001110100010", "111100000101", "011101101000", "110011110110", "110110100110", "110010001111", "101111111011", "101111011110", "010011100101", "010101101010", "000001100010", "101101001101", "111001010010", "100110110011", "111000111010", "100000110000", "011100101100", "011000110111", "101101100011", "001000010000", "000101101010", "010100101111", "011010111111", "010111011100", "100010001100", "111011001011", "011000000111", "011101100101", "011001100101", "101111010010", "100011011001", "100111110010", "000010010100", "000010000001", "111011010001", "101111001010", "001110000100", "111100100001", "011100000110", "000000110111", "101100001100", "100111110001", "010011010111", "111111010101", "101110101001", "010011111101", "101011101110", "000011000110", "111001001111", "111101101000", "001111101100", "011000011111", "101100000010", "011100110110", "001110110001", "011111100000", "010001010010", "111001111110", "010100010110", "101010100101", "111001101010", "110110101011", "110010011010", "110111101011", "111101110000", "001010100101", "001101001000", "110101101001", "101100010011", "011001011001", "000110010000", "000011000001", "000011000101", "100100100001", "001101101101", "000100001111", "111100110111", "010000111110", "111110011010", "001101110111", "100101111000", "000110110100", "111110010100", "010011001100", "101100010100", "110011101110", "011001101110", "110001001011", "010000000101", "100110101101", "000011011111", "001101110011", "111001001101", "011000010110", "001010101110", "001010010110", "101000000101", "111101111111", "110001001000", "001100010110", "110001000101", "111010001011", "011001001011", "001011011011", "111100001001", "101101110101", "111010111011", "100000111101", "100111000000", "001110111110", "100110010000", "101110000000", "011101101010", "001010011011", "001100101100", "101011101001", "110001000011", "011100010111", "100001010111", "101001110111", "000100000001", "000100101101", "101110101100", "000111011001", "101011111010", "100101010101", "010100010111", "010000100101", "110011000010", "001110001111", "000010110001", "010000100010", "111111001000", "111000110111", "001100010101", "000110111100", "001100101111", "110011111101", "001100011010", "110000100011", "101001101111", "111101100101", "110100010101", "100110001010", "001000000000", "110111100000", "110001001001", "001000011101", "100000101101", "010111001010", "000001101000", "111000001110", "011001010100", "000110000001", "110110010100", "101001001111", "101010100010", "111010110000", "010000001110", "111011001101", "111111101101", "001001100011", "110001101111", "110111111101", "000100010001", "101000010100", "011011001110", "101101101010", "011010000100", "110000110111", "110100010100", "100010010001", "100111110111", "011001111101", "010001111100", "000110111111", "001011100100", "110011101100", "001101100011", "101001100001", "110011111111", "111000011110", "000110101110", "101100001101", "010010010111", "000000101111", "010010110110", "111111010100", "010101101001", "110011100110", "000101001001", "111001111010", "111101111110", "011011101001", "101010010111", "101111001111", "100101111011", "001101110100", "011111110101", "000101010111", "000101000011", "010001101010", "010101110110", "010010100011", "011100100010", "001101000101", "101010001111", "000111111010", "111010110011", "110010100000", "011111111111", "111001010001", "111010000100", "000010100001", "001100011011", "010010000000", "100111101000", "011010101010", "101011101011", "010001100101", "001011100010", "111111110100", "001011011010", "100111101111", "000001110111", "110101010101", "100111011110", "101011100011", "001110010011", "100101000000", "000100001110", "001000111000", "100011111100", "011000010101", "100000000111", "100011001010", "010100110010", "011100010101", "110001100101", "000011100100", "111100111001", "001100111100", "001011101001", "101011001101", "001001001111", "100010110000", "010000001111", "001101101000", "111100101111", "111100100100", "000001000101", "100010000010", "110101010110", "111111100010", "000010110111", "000111110011", "000010101000", "111000001100", "101110001011", "100000010001", "010010110111", "011101110111", "100001000110", "011111101101", "111101110010", "110100001000", "100010111000", "000001011010", "110010100011", "001001011100", "111011100010", "110110001111", "011111110011", "011011010100", "100000110101", "100110000001", "100111101100", "010101001110", "101101111011", "001000110100", "010110111000", "110000100110", "100001000101", "101000001101", "110001011110", "110000010100", "111111011110", "000000010000", "001110100100", "100100000000", "111000011010", "000010111100", "000101100001", "100000011100", "111101100011", "000011000000", "001100001100", "100001101011", "010100010010", "111010101111", "101100001011", "010110111111", "010110110010", "000111111111", "010100001001", "101110011101", "011000101101", "000100001011", "000000101011", "100011000101", "011010101000", "010110000000", "001011111010", "010011011011", "011111100100", "000110011101", "010001000100", "111010110010", "111101110101", "101001110010", "010101001111", "001000010010", "001101001001", "011011000010", "010110100111", "001000111101", "101011001011", "110110110101", "011110011111", "111000111101", "100011001011", "001111111011", "011111010010", "000101100011", "000010111001", "011011010010", "010100011010", "111111001111", "010001110100", "110001111011", "100011000100", "101101000100", "001110100111", "000101101011", "000100001001", "110101110110", "100000101011", "010000000000", "011010100000", "110011001111", "010110110111", "100000001001" };
       
        public void Run1()
        {
            int size = inputs[0].Length;
            int count = inputs.Length;
            StringBuilder gammaBuilder = new StringBuilder();
            StringBuilder epsilonBuilder = new StringBuilder();
            for (int i = 0; i < size; i++)
            {
                int oneAmount = inputs.Select(x => x[i]).Count(x => x == '1');
                int zeroAmount = count - oneAmount;
                if (oneAmount > zeroAmount)
                {
                    gammaBuilder.Append('1');
                    epsilonBuilder.Append('0');
                }
                else
                {
                    gammaBuilder.Append('0');
                    epsilonBuilder.Append('1');
                }
            }

            string gammaValue = gammaBuilder.ToString();
            string epsilonValue = epsilonBuilder.ToString();

            long gamma = 0, epsilon = 0;
            for (int i = gammaValue.Length - 1, j = 0; i >= 0; i--, j++)
            {
                int g = int.Parse(gammaValue[i].ToString());
                int e = int.Parse(epsilonValue[i].ToString());
                long p = (long)Math.Pow(2, j);
                gamma += g * p;
                epsilon += e * p;
                //Console.WriteLine($"[2^{j}] b:{g} {gamma}, b:{e} {epsilon}");
            }

            //long gamma = Convert.ToInt64(gammaValue);
            //long epsilon = Convert.ToInt64(epsilonValue);
            long power = gamma * epsilon;

            Console.WriteLine($"Puzzle3: Gamma = {gammaValue}/{gamma}, Epsilon = {epsilonValue}/{epsilon}, Power = {power}");
        }

        public void Run2()
        {
            int size = inputs[0].Length;
            int count = inputs.Length;
            StringBuilder oxygenBuilder = new StringBuilder();
            StringBuilder co2Builder = new StringBuilder();
            string oxygenRating = null, co2Rating = null;
            List<string> options = inputs.ToList();
            int currentBit = 0;
            while (oxygenRating == null)
            {
                int oneAmount = options.Select(x => x[currentBit]).Count(x => x == '1');
                int zeroAmount = options.Count - oneAmount;
                oxygenBuilder.Append(oneAmount >= zeroAmount ? "1" : "0");
                string currentOxygen = oxygenBuilder.ToString();
                if (oxygenRating == null)
                {
                    string[] matches = options.Where(x => x.StartsWith(currentOxygen)).ToArray();
                    Console.WriteLine($"[{currentBit}] O2 matches starting with {currentOxygen}: {matches.Length}\n");
                    if (matches.Length == 1)
                    { oxygenRating = matches[0]; }
                    else
                    {
                        options.Clear();
                        options.AddRange(matches);
                        currentBit++;
                        if (currentBit > 11)
                            throw new Exception();
                    }
                }
            }
            options = inputs.ToList();
            currentBit = 0;
            while (co2Rating == null)
            {
                int oneAmount = options.Select(x => x[currentBit]).Count(x => x == '1');
                int zeroAmount = options.Count - oneAmount;
                co2Builder.Append(oneAmount >= zeroAmount ? "0" : "1");
                string currentCo2 = co2Builder.ToString();
                if (co2Rating == null)
                {
                    string[] matches = options.Where(x => x.StartsWith(currentCo2)).ToArray();
                    Console.WriteLine($"[{currentBit}]CO2 matches starting with {currentCo2}: {matches.Length}\n");
                    if (matches.Length == 1)
                    { co2Rating = matches[0]; }
                    else
                    {
                        options.Clear();
                        options.AddRange(matches);
                        currentBit++;
                    }
                }
            }
            (long o2, long co2) = ToInt(oxygenRating, co2Rating);
            long total = o2 * co2;
            Console.WriteLine($"Oxygen: {oxygenRating}/{o2}, CO2: {co2Rating}/{co2}, TOTAL: {total}");
        }
        
        private (long, long) ToInt(string s1, string s2)
        {
            long gamma = 0, epsilon = 0;
            for (int i = s1.Length - 1, j = 0; i >= 0; i--, j++)
            {
                int g = int.Parse(s1[i].ToString());
                int e = int.Parse(s2[i].ToString());
                long p = (long)Math.Pow(2, j);
                gamma += g * p;
                epsilon += e * p;
                //Console.WriteLine($"[2^{j}] b:{g} {gamma}, b:{e} {epsilon}");
            }
            return (gamma, epsilon);
        }
    }

    class Puzzle4
    {
        int[] numbers = new int[] { 13, 79, 74, 35, 76, 12, 43, 71, 87, 72, 23, 91, 31, 67, 58, 61, 96, 16, 81, 92, 41, 6, 32, 86, 77, 42, 0, 55, 68, 14, 53, 26, 25, 11, 45, 94, 75, 1, 93, 83, 52, 7, 4, 22, 34, 64, 69, 88, 65, 66, 39, 97, 27, 29, 78, 5, 49, 82, 54, 46, 51, 28, 98, 36, 48, 15, 2, 50, 38, 24, 89, 59, 8, 3, 18, 47, 10, 90, 21, 80, 73, 33, 85, 62, 19, 37, 57, 95, 60, 20, 99, 17, 63, 56, 84, 44, 40, 70, 9, 30 };
        int[][,] boards = new int[][,]
        {
              new int[,]{{14,86,50,89,49},
 {10,85,33,46,87},
 {82,91,54,13,90},
 {63,88,75,99,79},
 {74,31,4,0,71}},

new int[,]{{56,3,70,2,22},
 {44,63,10,95,8},
 {92,62,83,4,93},
 {74,80,5,11,68},
 {24,50,42,65,72}},

new int[,]{{42,21,72,26,7},
 {4,78,1,49,50},
 {93,43,38,71,68},
 {62,52,40,61,82},
 {31,28,16,96,18}},

new int[,]{{46,77,11,86,64},
 {4,14,61,94,30},
 {76,21,7,2,92},
 {55,1,66,45,23},
 {65,51,67,26,29}},

new int[,]{{1,89,70,73,81},
 {75,40,93,15,60},
 {11,58,37,42,26},
 {62,36,20,87,47},
 {54,35,6,23,10}},

new int[,]{{2,13,21,69,71},
 {98,59,82,7,32},
 {67,90,62,51,19},
 {84,6,23,3,17},
 {24,10,25,0,47}},

new int[,]{{28,10,26,86,65},
 {33,18,21,6,99},
 {40,61,30,58,34},
 {29,37,78,4,83},
 {87,53,44,22,32}},

new int[,]{{19,35,93,78,26},
 {87,99,15,75,56},
 {70,22,33,27,24},
 {58,53,83,48,8},
 {62,66,18,89,25}},

new int[,]{{30,25,67,77,47},
 {99,0,44,40,23},
 {31,19,52,55,7},
 {65,22,12,27,71},
 {82,62,54,78,18}},

new int[,]{{17,19,56,93,15},
 {62,30,64,68,21},
 {32,84,43,81,51},
 {61,83,52,65,58},
 {90,87,31,67,10}},

new int[,]{{95,76,21,10,1},
 {81,30,64,51,44},
 {77,31,32,94,90},
 {58,48,11,43,37},
 {12,19,82,85,80}},

new int[,]{{79,91,84,44,35},
 {80,6,64,0,20},
 {7,36,33,17,51},
 {71,19,24,26,2},
 {75,37,25,59,11}},

new int[,]{{48,91,17,38,16},
 {54,46,53,33,28},
 {20,6,68,96,45},
 {70,75,35,65,59},
 {0,39,13,23,4}},

new int[,]{{41,83,90,95,17},
 {67,4,23,62,93},
 {31,1,51,21,16},
 {34,14,92,66,89},
 {0,78,58,80,96}},

new int[,]{{67,2,42,36,32},
 {1,62,37,65,79},
 {66,80,19,75,0},
 {17,86,94,49,54},
 {40,59,16,14,30}},

new int[,]{{33,70,65,6,20},
 {44,22,55,81,15},
 {54,2,13,5,1},
 {93,40,97,67,78},
 {30,75,96,41,7}},

new int[,]{{40,96,24,19,32},
 {88,58,65,34,52},
 {38,49,50,5,35},
 {4,13,2,22,26},
 {46,55,18,89,33}},

new int[,]{{64,17,54,59,16},
 {22,97,91,83,87},
 {0,3,85,92,43},
 {99,31,19,73,4},
 {8,41,68,48,75}},

new int[,]{{37,45,16,50,57},
 {31,14,32,77,60},
 {90,63,3,40,8},
 {96,6,56,95,2},
 {80,69,61,52,24}},

new int[,]{{84,50,31,7,40},
 {32,58,47,51,70},
 {59,76,44,83,72},
 {87,52,77,10,81},
 {57,1,12,37,73}},

new int[,]{{14,74,7,98,95},
 {78,47,1,22,96},
 {45,80,92,37,21},
 {15,10,33,73,63},
 {29,34,51,27,31}},

new int[,]{{76,21,26,20,22},
 {89,58,37,91,38},
 {59,9,74,24,96},
 {80,69,30,7,0},
 {70,87,16,78,49}},

new int[,]{{69,79,75,99,65},
 {20,48,61,29,67},
 {31,86,90,72,57},
 {62,83,94,74,1},
 {34,13,55,56,36}},

new int[,]{{54,52,66,15,29},
 {7,16,94,62,92},
 {50,80,6,24,58},
 {96,13,93,1,0},
 {65,3,12,44,76}},

new int[,]{{45,43,51,92,86},
 {60,70,3,23,69},
 {63,78,30,66,48},
 {17,74,81,75,37},
 {79,53,25,28,15}},

new int[,]{{69,60,98,68,37},
 {18,39,36,48,75},
 {50,3,52,11,87},
 {57,46,63,80,41},
 {89,12,94,84,25}},

new int[,]{{79,11,64,51,67},
 {17,47,98,57,5},
 {16,70,49,0,83},
 {32,56,84,73,86},
 {74,59,35,15,6}},

new int[,]{{6,94,81,28,82},
 {53,58,43,46,51},
 {17,20,18,96,41},
 {66,22,27,12,44},
 {93,40,78,26,54}},

new int[,]{{28,88,94,9,16},
 {14,66,2,98,82},
 {23,69,44,75,10},
 {38,34,18,51,1},
 {68,52,29,0,39}},

new int[,]{{11,45,80,94,89},
 {24,44,96,71,58},
 {97,2,46,92,12},
 {47,19,99,55,7},
 {64,62,72,23,61}},

new int[,]{{99,92,94,38,98},
 {10,97,40,57,30},
 {67,77,7,64,23},
 {88,80,58,78,59},
 {42,69,68,16,60}},

new int[,]{{68,74,52,73,18},
 {62,57,49,91,19},
 {21,48,51,22,70},
 {45,29,53,75,8},
 {42,17,20,47,31}},

new int[,]{{76,29,88,23,65},
 {80,2,90,75,48},
 {93,55,10,50,81},
 {74,54,6,89,18},
 {27,26,84,11,78}},

new int[,]{{69,39,34,79,12},
 {72,96,80,68,44},
 {27,57,99,61,64},
 {81,63,6,25,95},
 {8,32,15,74,35}},

new int[,]{{40,38,2,63,21},
 {28,57,90,19,49},
 {68,75,11,24,44},
 {45,50,15,27,9},
 {31,30,52,33,36}},

new int[,]{{4,55,11,83,95},
 {35,0,30,25,45},
 {73,31,94,22,28},
 {91,19,50,54,47},
 {14,90,71,98,23}},

new int[,]{{31,55,45,78,67},
 {1,24,51,25,80},
 {85,96,46,87,64},
 {37,93,22,59,90},
 {69,70,50,17,53}},

new int[,]{{20,66,46,83,91},
 {28,57,99,63,1},
 {17,59,54,47,55},
 {50,10,41,53,34},
 {3,39,97,9,38}},

new int[,]{{58,29,70,23,95},
 {96,67,84,59,45},
 {35,64,63,77,52},
 {31,14,33,12,78},
 {17,36,98,0,71}},

new int[,]{{83,68,7,9,75},
 {13,39,5,99,73},
 {82,60,14,8,63},
 {49,86,67,56,91},
 {62,52,36,1,29}},

new int[,]{{24,65,75,31,63},
 {48,72,14,70,0},
 {85,30,42,33,87},
 {26,8,29,4,96},
 {93,60,74,9,50}},

new int[,]{{16,98,31,91,43},
 {90,76,97,18,70},
 {67,2,45,41,58},
 {7,8,26,62,61},
 {72,21,63,69,17}},

new int[,]{{15,28,96,16,24},
 {45,41,62,89,67},
 {57,4,80,23,3},
 {29,51,99,94,68},
 {56,37,81,54,63}},

new int[,]{{61,81,6,46,77},
 {28,43,63,10,41},
 {76,12,82,23,13},
 {32,47,94,96,92},
 {7,29,69,22,64}},

new int[,]{{68,64,51,69,96},
 {76,18,88,43,55},
 {8,91,73,83,54},
 {0,35,94,20,97},
 {50,29,82,71,75}},

new int[,]{{28,56,92,79,36},
 {18,85,35,25,26},
 {51,54,53,21,59},
 {64,19,17,14,30},
 {9,84,5,93,46}},

new int[,]{{58,3,5,76,57},
 {55,64,79,16,97},
 {14,59,93,24,60},
 {84,49,44,69,15},
 {87,42,43,25,18}},

new int[,]{{5,90,79,46,80},
 {41,56,93,15,50},
 {53,25,95,39,0},
 {77,89,40,17,92},
 {9,73,85,28,42}},

new int[,]{{20,85,78,73,74},
 {59,12,82,24,52},
 {55,33,11,28,60},
 {15,25,61,16,45},
 {3,14,39,95,92}},

new int[,]{{82,94,47,30,79},
 {38,87,15,31,45},
 {69,63,98,72,1},
 {77,39,96,81,92},
 {16,71,80,86,2}},

new int[,]{{38,60,28,94,24},
 {40,46,67,22,34},
 {39,70,71,3,96},
 {27,54,41,69,18},
 {23,62,1,61,84}},

new int[,]{{74,85,15,44,11},
 {39,92,43,79,1},
 {82,8,26,9,57},
 {20,93,18,97,31},
 {67,81,17,21,13}},

new int[,]{{54,63,83,89,51},
 {0,8,15,25,59},
 {95,74,18,28,98},
 {50,3,34,23,77},
 {4,24,61,90,88}},

new int[,]{{11,64,61,28,27},
 {5,35,74,75,47},
 {69,84,17,62,9},
 {40,21,32,73,67},
 {92,36,12,51,26}},

new int[,]{{35,50,7,26,36},
 {43,56,42,41,48},
 {59,54,91,55,33},
 {37,13,19,20,88},
 {22,21,51,4,69}},

new int[,]{{93,48,8,94,6},
 {14,34,13,10,32},
 {64,90,92,23,15},
 {63,95,85,28,87},
 {38,5,91,75,24}},

new int[,]{{94,68,32,85,10},
 {75,33,0,52,37},
 {82,8,24,58,93},
 {49,73,63,44,61},
 {71,50,16,88,72}},

new int[,]{{93,71,54,20,51},
 {39,92,75,79,66},
 {6,58,52,22,63},
 {74,53,99,16,61},
 {29,96,11,83,24}},

new int[,]{{32,26,10,77,16},
 {31,92,58,44,79},
 {17,2,72,29,8},
 {93,38,9,15,3},
 {50,89,61,88,81}},

new int[,]{{95,65,70,27,79},
 {4,19,30,86,72},
 {80,61,68,74,49},
 {7,5,77,14,53},
 {98,44,51,43,93}},

new int[,]{{59,70,44,52,14},
 {31,82,9,55,13},
 {15,63,99,26,61},
 {34,48,23,56,41},
 {97,79,28,29,93}},

new int[,]{{26,86,35,66,67},
 {25,39,48,45,69},
 {44,93,13,17,81},
 {70,89,54,62,68},
 {41,36,90,83,12}},

new int[,]{{92,59,53,11,83},
 {43,70,30,8,66},
 {46,6,31,56,90},
 {62,20,65,94,34},
 {67,96,47,71,17}},

new int[,]{{34,85,72,51,46},
 {21,6,44,64,27},
 {79,86,29,33,35},
 {7,87,47,94,84},
 {62,90,58,80,73}},

new int[,]{{7,73,50,0,35},
 {77,6,33,89,94},
 {71,52,95,53,8},
 {22,9,46,49,75},
 {45,56,96,87,67}},

new int[,]{{85,64,44,39,57},
 {90,30,15,35,54},
 {78,89,55,99,12},
 {80,96,20,50,45},
 {56,10,71,59,17}},

new int[,]{{66,87,77,71,45},
 {79,65,80,11,88},
 {74,99,30,89,73},
 {58,78,64,85,20},
 {10,41,1,44,49}},

new int[,]{{38,47,3,60,27},
 {8,10,14,4,1},
 {92,24,46,16,95},
 {55,69,77,7,36},
 {15,51,13,58,76}},

new int[,]{{61,3,71,38,46},
 {34,93,42,90,32},
 {99,16,73,55,6},
 {48,23,56,12,39},
 {22,87,51,70,89}},

new int[,]{{8,58,99,23,56},
 {91,62,68,57,32},
 {46,95,21,3,75},
 {35,51,33,7,74},
 {26,2,89,76,48}},

new int[,]{{93,89,88,49,55},
 {11,29,72,27,35},
 {45,5,46,18,65},
 {23,32,30,97,42},
 {76,19,22,77,78}},

new int[,]{{17,43,19,2,42},
 {20,26,36,68,75},
 {38,94,37,99,93},
 {62,46,1,45,89},
 {59,7,92,78,22}},

new int[,]{{75,41,53,45,7},
 {91,55,40,31,36},
 {29,78,90,17,57},
 {63,20,77,67,42},
 {64,62,11,48,84}},

new int[,]{{26,89,27,47,91},
 {15,9,18,62,28},
 {31,96,42,81,86},
 {11,52,20,93,38},
 {83,64,39,1,60}},

new int[,]{{99,48,86,72,92},
 {38,32,62,18,17},
 {93,71,76,73,64},
 {26,36,74,52,68},
 {24,98,34,88,45}},

new int[,]{{18,84,79,52,42},
 {54,10,33,90,64},
 {35,1,78,62,65},
 {22,48,87,72,50},
 {56,3,49,20,63}},

new int[,]{{14,50,79,84,49},
 {17,46,66,80,87},
 {97,90,24,65,73},
 {25,30,94,72,99},
 {78,89,81,96,28}},

new int[,]{{7,24,96,54,86},
 {4,56,83,32,27},
 {29,91,73,34,45},
 {16,70,1,39,3},
 {94,47,44,42,87}},

new int[,]{{44,74,52,65,22},
 {5,46,75,27,12},
 {25,24,43,21,42},
 {19,80,60,97,3},
 {8,84,9,87,94}},

new int[,]{{62,80,7,66,82},
 {60,79,45,1,75},
 {55,54,85,64,96},
 {65,6,16,27,38},
 {77,26,74,71,91}},

new int[,]{{55,23,59,47,62},
 {53,92,34,96,58},
 {38,3,88,46,60},
 {50,56,83,39,80},
 {37,6,93,7,94}},

new int[,]{{56,26,45,73,16},
 {37,30,74,44,64},
 {53,70,29,21,49},
 {4,5,27,92,22},
 {36,8,63,50,69}},

new int[,]{{70,83,15,22,56},
 {64,98,32,39,12},
 {82,21,73,19,14},
 {44,61,78,26,99},
 {76,24,81,38,85}},

new int[,]{{56,55,64,39,19},
 {13,70,63,32,54},
 {85,22,14,27,73},
 {25,89,15,44,21},
 {29,77,79,23,10}},

new int[,]{{84,27,63,34,5},
 {57,81,78,90,59},
 {35,85,51,54,48},
 {92,4,89,70,30},
 {97,0,7,86,26}},

new int[,]{{4,44,88,71,6},
 {80,23,19,55,57},
 {91,7,18,27,95},
 {85,13,66,8,34},
 {63,45,77,17,84}},

new int[,]{{58,7,56,38,48},
 {92,97,50,80,54},
 {5,8,17,49,23},
 {96,82,20,74,4},
 {90,0,59,93,30}},

new int[,]{{44,97,88,33,11},
 {18,69,4,0,94},
 {13,57,24,9,53},
 {49,7,68,15,42},
 {25,39,52,6,98}},

new int[,]{{31,65,59,74,12},
 {22,39,13,2,16},
 {44,46,90,60,93},
 {82,9,71,99,89},
 {23,80,35,51,41}},

new int[,]{{47,30,75,73,22},
 {62,87,59,42,90},
 {9,5,41,54,32},
 {71,25,46,24,12},
 {53,28,77,33,76}},

new int[,]{{36,25,2,74,29},
 {58,34,44,94,83},
 {16,72,69,45,28},
 {88,0,86,14,49},
 {10,56,24,82,73}},

new int[,]{{27,42,83,51,61},
 {93,77,33,49,46},
 {23,5,41,48,90},
 {81,10,3,16,1},
 {84,36,40,88,54}},

new int[,]{{60,85,7,28,39},
 {54,11,4,18,84},
 {63,95,62,13,82},
 {93,33,40,16,55},
 {34,78,29,56,66}},

new int[,]{{51,99,73,14,69},
 {3,65,23,60,96},
 {1,49,78,55,25},
 {15,66,11,42,87},
 {48,52,56,34,38}},

new int[,]{{60,59,65,32,73},
 {68,76,35,75,42},
 {72,70,45,34,38},
 {29,84,28,62,43},
 {49,85,31,57,23}},

new int[,]{{42,57,40,73,32},
 {70,79,80,11,67},
 {55,26,87,92,19},
 {63,58,78,29,77},
 {17,74,18,20,60}},

new int[,]{{84,99,72,74,62},
 {15,14,50,57,77},
 {48,91,55,46,82},
 {85,27,33,21,54},
 {45,31,43,40,60}},

new int[,]{{73,37,66,67,19},
 {16,79,15,45,89},
 {84,78,69,28,46},
 {17,4,12,95,87},
 {49,99,31,9,36}},

new int[,]{{61,34,98,60,74},
 {30,95,33,46,64},
 {73,97,12,26,7},
 {2,58,49,70,54},
 {80,55,94,91,11}},

new int[,]{{27,5,3,62,49},
 {38,88,40,9,47},
 {29,59,94,74,12},
 {48,73,85,97,35},
 {28,25,30,14,83}}
        };


        public void Run1()
        {
            List<bool[,]> marked = new List<bool[,]>();
            for(int i =0; i < boards.Length;i++)
            {
                marked.Add(new bool[5, 5]);
            }
            int totalScore = 0;
            Console.WriteLine($"Boards {boards.Length}");
            for (int i = 0; i < numbers.Length;i++)
            {
                for (int board = 0; board < boards.Length; board++)
                {
                    for (int row = 0; row < 5; row++)
                    {
                        for (int col = 0; col < 5; col++)
                        {
                            if (boards[board][row,col] == numbers[i])
                            {
                                marked[board][row, col] = true;
                                for (int checkRow =0; checkRow < 5; checkRow++)
                                {
                                    var checkMark = marked[board];
                                    if (checkMark[checkRow, 0]
                                        && checkMark[checkRow, 1]
                                        && checkMark[checkRow, 2]
                                        && checkMark[checkRow, 3]
                                        && checkMark[checkRow, 4])
                                    {
                                        Console.WriteLine("Bingo Horizontal");
                                        var winner = boards[board];
                                        var winnerMark = checkMark;
                                        int partial = 0;
                                        for (int k = 0; k < 5; k++)
                                        {
                                            for (int l = 0; l<5; l++)
                                            {
                                                if (!winnerMark[k, l])
                                                    partial += winner[k, l];
                                            }
                                        }
                                        totalScore = partial * numbers[i];

                                        Console.WriteLine($"Total={totalScore}");
                                        return;
                                    }
                                }
                                for (int checkCol =0;checkCol < 5; checkCol++)
                                {
                                    var checkMark = marked[board];
                                    if (checkMark[0, checkCol]
                                        && checkMark[1, checkCol]
                                        && checkMark[2, checkCol]
                                        && checkMark[3, checkCol]
                                        && checkMark[4, checkCol])
                                    {
                                        Console.WriteLine("Bingo vertical");
                                        var winner = boards[board];
                                        var winnerMark = marked[board];
                                        int partial = 0;
                                        for (int k = 0; k < 5; k++)
                                        {
                                            for (int l = 0; l < 5; l++)
                                            {
                                                if (!winnerMark[k, l])
                                                    partial += winner[k, l];
                                            }
                                        }
                                        totalScore = partial * numbers[i];
                                        Console.WriteLine($"Total={totalScore}");
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }

        public void Run2()
        {
            List<bool[,]> marked = new List<bool[,]>();
            for (int i = 0; i < boards.Length; i++)
            {
                marked.Add(new bool[5, 5]);
            }
            int totalScore = 0;
            List<int> winners = new List<int>();
            Console.WriteLine($"Boards {boards.Length}");
            
            for (int i = 0; i < numbers.Length; i++)
            {
                for (int board = 0; board < boards.Length; board++)
                {
                    if (winners.Contains(board)) continue;
                    for (int row = 0; row < 5; row++)
                    {
                        for (int col = 0; col < 5; col++)
                        {
                            if (boards[board][row, col] == numbers[i])
                            {
                                marked[board][row, col] = true;
                                for (int checkRow = 0; checkRow < 5; checkRow++)
                                {
                                    var checkMark = marked[board];
                                    if (checkMark[checkRow, 0]
                                        && checkMark[checkRow, 1]
                                        && checkMark[checkRow, 2]
                                        && checkMark[checkRow, 3]
                                        && checkMark[checkRow, 4])
                                    {
                                        //Console.WriteLine("Bingo Horizontal");
                                        var winner = boards[board];
                                        var winnerMark = checkMark;
                                        int partial = 0;
                                        for (int k = 0; k < 5; k++)
                                        {
                                            for (int l = 0; l < 5; l++)
                                            {
                                                if (!winnerMark[k, l])
                                                    partial += winner[k, l];
                                            }
                                        }
                                        totalScore = partial * numbers[i];
                                        
                                        
                                        if (!winners.Contains(board))
                                        {
                                            winners.Add(board);
                                            Console.WriteLine($"Total={totalScore}");
                                        }
                                    }
                                }
                                for (int checkCol = 0; checkCol < 5; checkCol++)
                                {
                                    var checkMark = marked[board];
                                    if (checkMark[0, checkCol]
                                        && checkMark[1, checkCol]
                                        && checkMark[2, checkCol]
                                        && checkMark[3, checkCol]
                                        && checkMark[4, checkCol])
                                    {
                                        var winner = boards[board];
                                        var winnerMark = marked[board];
                                        int partial = 0;
                                        for (int k = 0; k < 5; k++)
                                        {
                                            for (int l = 0; l < 5; l++)
                                            {
                                                if (!winnerMark[k, l])
                                                    partial += winner[k, l];
                                            }
                                        }
                                        totalScore = partial * numbers[i];
                                        if (!winners.Contains(board))
                                        {
                                            winners.Add(board);
                                            Console.WriteLine($"Total={totalScore}");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }
    }

}
